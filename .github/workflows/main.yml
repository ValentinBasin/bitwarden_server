name: "Deploy"

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # outputs:
    #   aws_access_key: ${{ steps.terraform.outputs.aws_access_key }}
    #   aws_secret_key: ${{ steps.terraform.outputs.aws_secret_key }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_REGION: ${{secrets.AWS_REGION}}
      TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_server_name: ${{ vars.SERVER_NAME }}
      TF_VAR_zone_id: ${{ vars.ZONE_ID }}
      TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      TF_VAR_backup_bucket_name: ${{ vars.AWS_BACKUP_BUCKET }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
          -backend-config="key=${{ vars.TF_STATE_KEY }}" \
          -backend-config="region=${{ vars.TF_STATE_REGION }}"

        # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve -input=false
          terraform output -json > $GITHUB_WORKSPACE/terraform_outputs.json 2>/dev/null
          #echo "$(terraform output -json)" > $GITHUB_WORKSPACE/terraform_outputs.json 
          cat -A $GITHUB_WORKSPACE/terraform_outputs.json
          od -c $GITHUB_WORKSPACE/terraform_outputs.json

      - name: Upload Terraform outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ github.workspace }}/terraform_outputs.json

      # - name: Write outputs
      #   id: terraform
      #   run: |
      #     echo "aws_access_key=$(terraform output aws_access_key | xargs )" >> $GITHUB_OUTPUT
      #     echo "aws_secret_key=$(terraform output aws_secret_key | xargs )" >> $GITHUB_OUTPUT

  ansible:
    needs: terraform
    runs-on: ubuntu-latest

    env:
      S3_BUCKET: ${{ vars.AWS_BACKUP_BUCKET }}
      AWS_REGION: ${{secrets.AWS_REGION}}

    defaults:
      run:
        shell: bash
        working-directory: ansible

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs

      - name: Read Terraform outputs
        run: |
          od -c $GITHUB_WORKSPACE/terraform_outputs.json         
          cat -A $GITHUB_WORKSPACE/terraform_outputs.json
          export AWS_ACCESS_KEY=$(jq -r '.aws_access_key.value' ${{ github.workspace }}/terraform_outputs.json)
          export AWS_SECRET_KEY=$(jq -r '.aws_secret_key.value' ${{ github.workspace }}/terraform_outputs.json)
          echo "AWS_ACCESS_KEY=$AWS_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_SECRET_KEY=$AWS_SECRET_KEY" >> $GITHUB_ENV

      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Add SSH-key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ vars.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Check deploy user connection
        run: ssh -i ~/.ssh/id_ed25519 deploy@${{ vars.DEPLOY_HOST }} "echo 'Deploy user is available'"
        continue-on-error: true

      - name: Define root or user modules
        id: check_user
        run: |
          if ssh -i ~/.ssh/id_ed25519 -o BatchMode=yes deploy@${{ vars.DEPLOY_HOST }} "exit" 2>/dev/null; then
            echo "user=deploy" >> $GITHUB_ENV
          else
            echo "user=root" >> $GITHUB_ENV
          fi
        continue-on-error: true

      - name: Run playbook
        run: ansible-playbook -i ${{ vars.DEPLOY_HOST }}, playbook.yml -u ${{ env.user }} --private-key ~/.ssh/id_ed25519
